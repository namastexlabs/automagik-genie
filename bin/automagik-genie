#!/usr/bin/env node

const { validateClaude } = require('../lib/claude-cli-check.js');
const { init } = require('../lib/init.js');
const path = require('path');
const { spawn } = require('child_process');
const readline = require('readline');

const showHelp = () => {
  console.log('🧞 Automagik Genie - Universal AI Development Companion');
  console.log('');
  console.log('Usage:');
  console.log('  npx automagik-genie init    Initialize Genie in current project');
  console.log('  npx automagik-genie --help  Show this help message');
  console.log('');
  console.log('Requirements:');
  console.log('  - Claude CLI must be installed and authenticated');
  console.log('  - Run in any project directory (any programming language)');
  console.log('');
  console.log('What it does:');
  console.log('  ✨ Analyzes your codebase (any language: Go, Rust, Python, JS, etc.)');
  console.log('  🤖 Creates project-specific AI agents');
  console.log('  🎯 Provides /wish command for development assistance');
  console.log('  🔧 Installs optional development workflow hooks');
  console.log('');
  console.log('After initialization:');
  console.log('  /wish "analyze this codebase"');
  console.log('  /wish "add authentication system"');
  console.log('  /wish "fix failing tests"');
  console.log('');
  console.log('Learn more: https://github.com/automagik-genie/automagik-genie');
};

const showPostInitInstructions = () => {
  console.log('🔍 The analyzer agent will auto-detect your tech stack');
  console.log('');
  console.log('🎯 Available commands:');
  console.log('   /wish "add feature X"     - Request new functionality');  
  console.log('   /wish "fix failing tests" - Debug and repair issues');
  console.log('   /wish "optimize performance" - Improve code efficiency');
  console.log('');
  console.log('📚 Check .claude/hooks/examples/ for optional workflow automation');
  console.log('');
  console.log('Happy coding! 🧞✨');
};

/**
 * Prompt user for permission skip option
 * @returns {Promise<boolean>} True if user wants to skip permissions
 */
const promptForPermissionSkip = () => {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    console.log('🔐 Claude CLI Permission Options:');
    console.log('');
    console.log('Claude CLI can run with enhanced permissions for full functionality,');
    console.log('or with restricted permissions for security-conscious environments.');
    console.log('');
    
    rl.question('Do you want to start with "--dangerously-skip-permissions"? (y/n): ', (answer) => {
      rl.close();
      const skipPermissions = answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes';
      
      if (skipPermissions) {
        console.log('✅ Will start Claude with --dangerously-skip-permissions');
      } else {
        console.log('✅ Will start Claude with full permissions');
      }
      console.log('');
      
      resolve(skipPermissions);
    });
  });
};

const main = async () => {
  const args = process.argv.slice(2);
  
  // Handle help command
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }
  
  // Handle version command
  if (args.includes('--version') || args.includes('-v')) {
    const packageJson = require('../package.json');
    console.log(packageJson.version);
    return;
  }
  
  // Default to init command
  const command = args[0] || 'init';
  
  if (command !== 'init') {
    console.log('❌ Unknown command:', command);
    console.log('💡 Run: npx automagik-genie --help');
    process.exit(1);
  }
  
  console.log('🧞 Initializing Automagik Genie...');
  console.log('');
  
  // Check Claude CLI first
  const claudeAvailable = await validateClaude();
  if (!claudeAvailable) {
    process.exit(1);
  }
  
  const targetPath = process.cwd();
  
  try {
    await init(targetPath);
    
    console.log('');
    console.log('✨ Genie successfully initialized!');
    console.log('');
    
    // Prompt for permission skip option
    const skipPermissions = await promptForPermissionSkip();
    
    console.log('🧞 Starting intelligent codebase analysis...');
    console.log('');
    
    // Construct claude command with conditional permission skip
    const claudeCommand = 'claude';
    const claudeArgs = [];
    
    if (skipPermissions) {
      claudeArgs.push('--dangerously-skip-permissions');
    }
    
    claudeArgs.push('/wish analyze this codebase and provide development recommendations following enterprise patterns');
    
    // Auto-trigger claude command for immediate analysis
    const claudeProcess = spawn(claudeCommand, claudeArgs, {
      stdio: 'inherit',
      shell: true,
      cwd: targetPath
    });

    claudeProcess.on('error', (error) => {
      console.log('');
      console.log('⚠️  Could not auto-start analysis:');
      
      if (error.code === 'ENOENT') {
        console.log('   Claude CLI not found in PATH');
        console.log('   Please ensure Claude CLI is installed and authenticated');
      } else {
        console.log(`   ${error.message}`);
      }
      console.log('');
      console.log('💡 Manual analysis: Run the following when ready:');
      if (skipPermissions) {
        console.log('   claude --dangerously-skip-permissions "/wish analyze this codebase and provide development recommendations"');
      } else {
        console.log('   claude "/wish analyze this codebase and provide development recommendations"');
      }
      console.log('');
      showPostInitInstructions();
    });

    claudeProcess.on('close', (code) => {
      console.log('');
      
      if (code === 0) {
        console.log('✨ Analysis complete!');
      } else {
        console.log('💡 Manual analysis available - run when ready:');
        if (skipPermissions) {
          console.log('   claude --dangerously-skip-permissions "/wish analyze this codebase and provide development recommendations"');
        } else {
          console.log('   claude "/wish analyze this codebase and provide development recommendations"');
        }
      }
      console.log('');
      showPostInitInstructions();
    });
    
  } catch (error) {
    console.error('❌ Initialization failed:', error.message);
    console.log('');
    console.log('🔧 Troubleshooting:');
    console.log('   • Ensure you have write permissions in this directory');
    console.log('   • Check that Claude CLI is properly authenticated');
    console.log('   • Try running: claude auth');
    console.log('');
    process.exit(1);
  }
};

// Handle unhandled errors gracefully
process.on('unhandledRejection', (error) => {
  console.error('❌ Unexpected error:', error.message);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('❌ Fatal error:', error.message);
  process.exit(1);
});

main();