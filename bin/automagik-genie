#!/usr/bin/env node

const { validateClaude } = require('../lib/claude-cli-check.js');
const { init } = require('../lib/init.js');
const path = require('path');
const { spawn } = require('child_process');
const readline = require('readline');

// Constants - single source of truth for all repeated values
const CONSTANTS = {
  WISH_TEXT: '/wish analyze this codebase, understand patterns, and propose development agents to be created',
  EXIT_CODE: {
    SUCCESS: 0,
    ERROR: 1
  },
  MESSAGES: {
    GENIE_TITLE: '🧞 Automagik Genie - Universal AI Development Companion',
    INIT_START: '🧞 Initializing Automagik Genie...',
    INIT_SUCCESS: '✨ Genie successfully initialized!',
    ANALYSIS_START: '🧞 Starting intelligent codebase analysis...',
    ANALYSIS_COMPLETE: '✨ Analysis complete!',
    MANUAL_AVAILABLE: '💡 Manual analysis available - run when ready:',
    AUTO_START_FAILED: '⚠️  Could not auto-start analysis:',
    UNKNOWN_COMMAND: '❌ Unknown command:',
    INIT_FAILED: '❌ Initialization failed:',
    UNEXPECTED_ERROR: '❌ Unexpected error:',
    FATAL_ERROR: '❌ Fatal error:',
    HELP_SUGGESTION: '💡 Run: npx automagik-genie --help',
    TROUBLESHOOTING: '🔧 Troubleshooting:',
    HAPPY_CODING: 'Happy coding! 🧞✨'
  }
};

// Utility functions
const logSpacing = () => console.log('');
const logWithSpacing = (message) => {
  logSpacing();
  console.log(message);
  logSpacing();
};
const exitWithError = (message) => {
  console.error(message);
  process.exit(CONSTANTS.EXIT_CODE.ERROR);
};

const showHelp = () => {
  console.log(CONSTANTS.MESSAGES.GENIE_TITLE);
  logSpacing();
  console.log('Usage:');
  console.log('  npx automagik-genie init    Initialize Genie in current project');
  console.log('  npx automagik-genie --help  Show this help message');
  logSpacing();
  console.log('Requirements:');
  console.log('  - Claude CLI must be installed and authenticated');
  console.log('  - Run in any project directory (any programming language)');
  logSpacing();
  console.log('What it does:');
  console.log('  ✨ Analyzes your codebase (any language: Go, Rust, Python, JS, etc.)');
  console.log('  🤖 Creates project-specific AI agents');
  console.log('  🎯 Provides /wish command for development assistance');
  console.log('  🔧 Installs optional development workflow hooks');
  logSpacing();
  console.log('After initialization:');
  console.log('  /wish "analyze this codebase"');
  console.log('  /wish "add authentication system"');
  console.log('  /wish "fix failing tests"');
  logSpacing();
  console.log('Learn more: https://github.com/namastexlabs/automagik-genie');
};

const showPostInitInstructions = () => {
  console.log('🔍 The analyzer agent will auto-detect your tech stack');
  logSpacing();
  console.log('🎯 Available commands:');
  console.log('   /wish "add feature X"     - Request new functionality');  
  console.log('   /wish "fix failing tests" - Debug and repair issues');
  console.log('   /wish "optimize performance" - Improve code efficiency');
  logSpacing();
  console.log('📚 Check .claude/hooks/examples/ for optional workflow automation');
  logSpacing();
  console.log(CONSTANTS.MESSAGES.HAPPY_CODING);
};

/**
 * Build Claude command with conditional permissions and wish text
 * @param {boolean} skipPermissions - Whether to add --dangerously-skip-permissions flag
 * @param {string} wishText - The wish command text to execute
 * @returns {string} Complete Claude command string
 */
const buildClaudeCommand = (skipPermissions, wishText) => {
  let command = 'claude';
  
  if (skipPermissions) {
    command += ' --dangerously-skip-permissions';
  }
  
  command += ` "${wishText}"`;
  return command;
};

/**
 * Show manual Claude command instructions with consistent formatting
 * @param {boolean} skipPermissions - Whether instructions should include skip permissions flag
 * @param {string} context - Context for the instructions (e.g., 'error', 'completion')
 */
const showManualInstructions = (skipPermissions, context = 'default') => {
  const command = buildClaudeCommand(skipPermissions, CONSTANTS.WISH_TEXT);
  
  console.log(CONSTANTS.MESSAGES.MANUAL_AVAILABLE);
  console.log(`   ${command}`);
};

/**
 * Handle Claude process errors with consistent messaging
 * @param {Error} error - The error object from Claude process
 * @param {boolean} skipPermissions - Whether skip permissions was used
 */
const handleClaudeError = (error, skipPermissions) => {
  logSpacing();
  console.log(CONSTANTS.MESSAGES.AUTO_START_FAILED);
  
  if (error.code === 'ENOENT') {
    console.log('   Claude CLI not found in PATH');
    console.log('   Please ensure Claude CLI is installed and authenticated');
  } else {
    console.log(`   ${error.message}`);
  }
  logSpacing();
  showManualInstructions(skipPermissions, 'error');
  logSpacing();
  showPostInitInstructions();
};

/**
 * Handle Claude process completion with consistent messaging
 * @param {number} code - Exit code from Claude process
 * @param {boolean} skipPermissions - Whether skip permissions was used
 */
const showAnalysisCompletion = (code, skipPermissions) => {
  logSpacing();
  
  if (code === CONSTANTS.EXIT_CODE.SUCCESS) {
    console.log(CONSTANTS.MESSAGES.ANALYSIS_COMPLETE);
  } else {
    showManualInstructions(skipPermissions, 'completion');
  }
  logSpacing();
  showPostInitInstructions();
};

/**
 * Prompt user for permission skip option
 * @returns {Promise<boolean>} True if user wants to skip permissions
 */
const promptForPermissionSkip = () => {
  return new Promise((resolve) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    console.log('🔐 Claude CLI Permission Options:');
    logSpacing();
    console.log('Claude CLI can run with enhanced permissions for full functionality,');
    console.log('or with restricted permissions for security-conscious environments.');
    logSpacing();
    
    rl.question('Do you want to start with "--dangerously-skip-permissions"? (y/n): ', (answer) => {
      rl.close();
      const skipPermissions = answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes';
      
      if (skipPermissions) {
        console.log('✅ Will start Claude with --dangerously-skip-permissions');
      } else {
        console.log('✅ Will start Claude with full permissions');
      }
      logSpacing();
      
      resolve(skipPermissions);
    });
  });
};

const main = async () => {
  const args = process.argv.slice(2);
  
  // Handle help command
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    return;
  }
  
  // Handle version command
  if (args.includes('--version') || args.includes('-v')) {
    const packageJson = require('../package.json');
    console.log(packageJson.version);
    return;
  }
  
  // Default to init command
  const command = args[0] || 'init';
  
  if (command !== 'init') {
    console.log(CONSTANTS.MESSAGES.UNKNOWN_COMMAND, command);
    console.log(CONSTANTS.MESSAGES.HELP_SUGGESTION);
    process.exit(CONSTANTS.EXIT_CODE.ERROR);
  }
  
  console.log(CONSTANTS.MESSAGES.INIT_START);
  logSpacing();
  
  // Check Claude CLI first
  const claudeAvailable = await validateClaude();
  if (!claudeAvailable) {
    process.exit(CONSTANTS.EXIT_CODE.ERROR);
  }
  
  const targetPath = process.cwd();
  
  try {
    await init(targetPath);
    
    logWithSpacing(CONSTANTS.MESSAGES.INIT_SUCCESS);
    
    // Prompt for permission skip option
    const skipPermissions = await promptForPermissionSkip();
    
    console.log(CONSTANTS.MESSAGES.ANALYSIS_START);
    logSpacing();
    
    // Build claude command for immediate analysis
    const claudeCommand = buildClaudeCommand(skipPermissions, CONSTANTS.WISH_TEXT);
    
    // Auto-trigger claude command for immediate analysis
    const claudeProcess = spawn(claudeCommand, {
      stdio: 'inherit',
      shell: true,
      cwd: targetPath
    });

    claudeProcess.on('error', (error) => {
      handleClaudeError(error, skipPermissions);
    });

    claudeProcess.on('close', (code) => {
      showAnalysisCompletion(code, skipPermissions);
    });
    
  } catch (error) {
    console.error(CONSTANTS.MESSAGES.INIT_FAILED, error.message);
    logSpacing();
    console.log(CONSTANTS.MESSAGES.TROUBLESHOOTING);
    console.log('   • Ensure you have write permissions in this directory');
    console.log('   • Check that Claude CLI is properly authenticated');
    console.log('   • Try running: claude auth');
    logSpacing();
    process.exit(CONSTANTS.EXIT_CODE.ERROR);
  }
};

// Handle unhandled errors gracefully
process.on('unhandledRejection', (error) => {
  exitWithError(`${CONSTANTS.MESSAGES.UNEXPECTED_ERROR} ${error.message}`);
});

process.on('uncaughtException', (error) => {
  exitWithError(`${CONSTANTS.MESSAGES.FATAL_ERROR} ${error.message}`);
});

main();