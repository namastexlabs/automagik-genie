name: üöÄ Unified Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Release action'
        required: true
        type: choice
        options:
          - 'bump-rc'
          - 'promote-to-stable'
          - 'manual-tag'
        default: 'bump-rc'
      tag:
        description: 'Version tag for manual-tag (e.g., v1.2.3)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
      released: ${{ steps.release.outputs.released }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîß Setup Release Environment
        uses: ./.github/actions/setup-release

      - name: üîç Determine Release Type
        id: detect
        run: |
          EVENT="${{ github.event_name }}"
          REF="${{ github.ref }}"

          # Determine action based on trigger
          if [ "$EVENT" = "workflow_dispatch" ]; then
            ACTION="${{ github.event.inputs.action }}"
          elif [ "$EVENT" = "push" ] && [[ "$REF" == refs/tags/* ]]; then
            ACTION="tag-push"
          elif [ "$EVENT" = "push" ] && [ "$REF" = "refs/heads/main" ]; then
            # Check if commit contains code changes
            COMMIT_MSG=$(git log -1 --pretty=%B)

            # Skip automated pre-release commits (prevents infinite loop)
            if echo "$COMMIT_MSG" | grep -Eq "^chore: pre-release|^chore:.*bump"; then
              echo "Skipping automated pre-release commit"
              ACTION="skip"
            # Trigger RC for code-changing commits
            elif echo "$COMMIT_MSG" | grep -Eq "^(feat|fix|test|build):"; then
              echo "Code-changing commit detected: triggering RC bump"
              ACTION="auto-bump-rc"
            # Skip documentation and non-code commits
            elif echo "$COMMIT_MSG" | grep -Eq "^(docs|chore|style|refactor|perf|ci):"; then
              echo "Non-code commit detected: skipping release"
              ACTION="skip"
            # Default: trigger RC for commits without conventional prefix (PR merges, etc)
            else
              echo "Non-conventional commit: triggering RC bump"
              ACTION="auto-bump-rc"
            fi
          elif [ "$EVENT" = "pull_request" ]; then
            # Merge dev ‚Üí main
            HEAD="${{ github.event.pull_request.head.ref }}"
            MERGED="${{ github.event.pull_request.merged }}"
            if [ "$HEAD" = "dev" ] && [ "$MERGED" = "true" ]; then
              ACTION="merge-rc"
            else
              ACTION="skip"
            fi
          else
            ACTION="skip"
          fi

          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "Release action: $ACTION"

      - name: ‚è≠Ô∏è Skip if Not Needed
        if: steps.detect.outputs.action == 'skip'
        run: echo "No release needed for this event"

      - name: üìå Bump RC (Auto)
        if: steps.detect.outputs.action == 'auto-bump-rc'
        id: release
        env:
          GENIE_SKIP_ADVISORY_SMOKE: "1"
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node scripts/unified-release.cjs \
            --bump rc \
            --publish \
            --github-release
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT

      - name: üìå Bump RC (Merge dev‚Üímain)
        if: steps.detect.outputs.action == 'merge-rc'
        id: merge_rc
        env:
          GENIE_SKIP_ADVISORY_SMOKE: "1"
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Clean conflicting RC tags
          CURRENT=$(node -p "require('./package.json').version")
          if [[ $CURRENT =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc\.([0-9]+)$ ]]; then
            BASE="${BASH_REMATCH[1]}"
            RC_NUM="${BASH_REMATCH[2]}"
            NEXT_RC=$((RC_NUM + 1))
            NEXT_TAG="v${BASE}-rc.${NEXT_RC}"
            git tag -d "$NEXT_TAG" 2>/dev/null || true
            git push origin ":refs/tags/$NEXT_TAG" 2>/dev/null || true
          fi

          node scripts/unified-release.cjs \
            --bump rc \
            --publish \
            --github-release

          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT

      - name: üìå Tag Push (Publish Existing)
        if: steps.detect.outputs.action == 'tag-push'
        id: tag_push
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.ref }}"
          VERSION=${TAG#refs/tags/v}

          node scripts/unified-release.cjs \
            --tag "v$VERSION" \
            --publish \
            --github-release \
            --skip-tests

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT

      - name: üéØ Manual Dispatch
        if: steps.detect.outputs.action == 'bump-rc' || steps.detect.outputs.action == 'promote-to-stable' || steps.detect.outputs.action == 'manual-tag'
        id: manual
        env:
          GENIE_SKIP_ADVISORY_SMOKE: "1"
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ACTION="${{ github.event.inputs.action }}"

          if [ "$ACTION" = "bump-rc" ]; then
            node scripts/unified-release.cjs --bump rc --publish --github-release
          elif [ "$ACTION" = "promote-to-stable" ]; then
            node scripts/unified-release.cjs --promote --publish --github-release
          elif [ "$ACTION" = "manual-tag" ]; then
            TAG="${{ github.event.inputs.tag }}"
            node scripts/unified-release.cjs --tag "$TAG" --publish --github-release --skip-tests
          fi

          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT

      - name: ‚úÖ Release Summary
        if: success() && steps.release.outputs.released == 'true' || steps.merge_rc.outputs.released == 'true' || steps.tag_push.outputs.released == 'true' || steps.manual.outputs.released == 'true'
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "üéâ Released v$VERSION"
          echo "üì¶ npm install automagik-genie@$(echo $VERSION | grep -q 'rc' && echo 'next' || echo 'latest')"
          echo "üîó https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

  sync-dev:
    name: Sync dev with main
    runs-on: ubuntu-latest
    needs: release
    if: success() && needs.release.outputs.released == 'true'

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: üîß Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: üîÑ Sync dev branch
        run: |
          # Fetch latest main and dev
          git fetch origin main
          git fetch origin dev || git fetch origin main:dev

          # Checkout dev (create if doesn't exist)
          git checkout -B dev origin/dev 2>/dev/null || git checkout -b dev origin/main

          # Merge main into dev
          git merge origin/main --no-edit -m "chore: sync dev with main after v${{ needs.release.outputs.version }} release

Automated sync after CI/CD version bump and changelog update."

          # Push to dev
          git push origin dev

      - name: ‚úÖ Report Success
        if: success()
        run: |
          echo "‚úÖ Dev branch synced successfully with main"
          echo "Main commit: $(git rev-parse origin/main)"
          echo "Dev commit: $(git rev-parse dev)"

      - name: ‚ö†Ô∏è Report Failure
        if: failure()
        run: |
          echo "‚ùå Failed to sync dev branch"
          echo "You may need to manually resolve conflicts"
          exit 1
